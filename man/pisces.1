.\" Copyright (c) 2008-2025 Ryan Vogt <rvogt.ca@gmail.com>
.\"
.\" Permission to use, copy, modify, and/or distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd June 11, 2025
.Dt PISCES 1
.Os
.Sh NAME
.Nm pisces
.Nd encrypt and decrypt files based on the AES standard
.Sh SYNOPSIS
.Nm pisces
.Op Fl dev
.Op Fl p Ar password
.Ar input_file
.Ar output_file
.Sh DESCRIPTION
The
.Nm
utility encrypts or decrypts data from the specified
.Ar input_file ,
writing the result to
.Ar output_file .
A file operand of
.Sq -
denotes standard input or standard output, respectively. By default,
.Nm
performs encryption.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl d
Decrypt
.Ar input_file .
.It Fl e
Encrypt
.Ar input_file .
This option is the default behaviour of
.Nm .
.It Fl p Ar password
Use
.Ar password
as the encryption password instead of prompting for one. You may wish to
enclose
.Ar password
in single quotes, to prevent the shell from attempting to parse it. Using this
option can compromise the security of
.Ar password ,
for example, if an adversary is running
.Xr ps 1
or has access to your shell history.
.It Fl v
Print the version of
.Nm
to standard output and exit.
.Sh EXIT STATUS
.Ex -std
.Sh EXAMPLES
To encrypt
.Ar foo.txt
and write the result to
.Ar foo.enc :
.Pp
.Dl $ pisces foo.txt foo.enc
.Pp
To decrypt
.Ar foo.enc
and write the result to
.Ar foo.orig ,
using
.Dq secret
as the password instead of prompting for one:
.Pp
.Dl $ pisces -d -p 'secret' foo.enc foo.orig
.Pp
To decrypt a file to standard output and filter the contents using
.Xr grep 1 :
.Pp
.Dl $ pisces -d foo.enc - | grep bar
.Pp
To encrypt a file from standard input, piped from
.Xr cat 1 :
.Pp
.Dl $ cat foo.txt | pisces - foo.enc
.Pp
To verify that a file would decrypt and pass Pisces' file-integrity check,
without writing the decrypted file to disk:
.Pp
.Dl $ pisces -d foo.enc /dev/null
.Pp
To archive and encrypt a directory,
.Ar foodir/ ,
using the GNU version of
.Xr tar 1
(installed as
.Ql gtar
in the example) to perform the archiving operation:
.Pp
.Bd -literal -offset indent 
$ gtar czf - foodir/ --format=posix | \\
    pisces - foodir.enc
.Ed
.Pp
To restore an archived, encrypted directory into a new directory,
.Ar newfoo/ :
.Pp
.Bd -literal -offset indent 
$ mkdir newfoo/
$ pisces -d foodir.enc - | \\
    gtar xzf - --strip-components=1 -C newfoo/ 
.Ed
.Sh ENCRYPTION ALGORITHM
When
.Nm
is used to encrypt a file, the user enters a one-line password (or passphrase)
that will later be used to decrypt the file. That password is transformed into
an encryption key,
.Ms K ,
using a key derivation function,
.Ms KDF .
.Ms KDF
will salt the password using a randomly generated salt,
.Ms S ,
with length equal to the length of the key
.Ms K .
.Pp
The first element placed into
.Ar output_file
is a header. The header begins with the six characters
.Li PISCES ,
followed by a one-byte encoding of the file format version. The current
version of the
.Nm
utility uses the Pisces version 5 specifications, so the single byte
.Li 0x05
will be output. The next component in the header is the salt,
.Ms S .
That will be followed by two randomly generated initialization vectors, denoted
.Ms I
and
.Ms J .
.Pp
Following the header, an imprint is placed into
.Ar output_file .
When
.Nm
is used to decrypt the file, and a user enters password
.Ms P'
which gets transformed using the stored salt
.Ms S
into a key
.Ms K' ,
the imprint makes it possible to check quickly whether
.Ms K'
was the key used to encrypt that file. However, given the imprint, it is not
feasible to compute the key
.Ms K
that was used in the original encryption. Specifically, some random data
.Ms R
is generated. Then, a cryptographic hash of
.Ms R
is computed,
.Ms H(R) ,
and these data are concatenated:
.Ms R\ ||\ H(R) .
The imprint is an encrypted version of this concatenation using the key
.Ms K
and the initialization vector
.Ms I :
.Ms E[K,\ I](R\ ||\ H(R)) .
.Pp
For the imprint, the size of
.Ms R
is chosen such that it is at least as large as the output of
.Ms H ,
and at least as large as both the block size and key size of
.Ms E .
Furthermore, the size of
.Ms R
is chosen such that the length of
.Ms R
plus the length of the output of
.Ms H
is a multiple of the block size of
.Ms E .
Because of this size choice, no padding is used during the encryption
operation for the imprint.
.Pp
Next, the key
.Ms K
and the second initialization vector,
.Ms J ,
are used as parameters to the encryption algorithm
.Ms E
to encrypt the contents of
.Ar input_file .
If
.Ms C
represents the contents of
.Ar input_file ,
then
.Ms E[K,\ J](C\ ||\ H(C))
is output to
.Ar output_file .
Because the length of
.Ms C
is indeterminate, PKCS #7 padding is used this time in
.Ms E .
.Sh VERSION 5 SPECIFICATIONS
.Bl -tag -width Ds
.It E
256-bit AES in CBC mode
.Tp
.It H
SHA3-512
.It KDF
PBKDF2, using HMAC-SHA3-512 as the generator, with 16384 iterations
.El
.Pp
As such,
.Ms I
and
.Ms J
are 128 bits each,
.Ms K
is 256 bits,
.Ms R
is 512 bits, and
.Ms S
is 256 bits.
.Sh VERSION 4 SPECIFICATIONS
.Bl -tag -width Ds
.It E
256-bit AES in CBC mode
.It H
SHA1
.It KDF
PBKDF2, using HMAC-SHA1 as the generator, with 4096 iterations
.El
.Pp
As such,
.Ms I
and
.Ms J
were 128 bits each,
.Ms K
was 256 bits,
.Ms R
was 352 bits, and
.Ms S
was 256 bits.
.Sh VERSION 3 SPECIFICATIONS
.Bl -tag -width Ds
.It E
128-bit AES in CBC mode
.It H
SHA1
.It KDF
PBKDF2, using HMAC-SHA1 as the generator, with 1024 iterations
.El
.Pp
As such,
.Ms I
and
.Ms J
were 128 bits each,
.Ms K
was 128 bits,
.Ms R
was 224 bits, and
.Ms S
was 128 bits.
.Sh HISTORY
Versions 1 and 2 of
.Nm
were internal development versions, and files encrypted in either of those
formats simply do not exist anymore. Version 1 used the Twofish block cipher,
giving the
.Nm
project its name. The name stuck, even though the underlying block cipher
changed.
.Pp
While the current
.Nm
utility will only produce version 5 encrypted files, it is still able to
decrypt files produced by every version of
.Nm
that has been publicly released, specifically versions 3, 4, and 5.
.Sh AUTHOR
.An Ryan Vogt Aq Mt rvogt.ca@gmail.com
